{
  "version": 3,
  "sources": ["../scripts/stateManager.js", "../scripts/trackerUI.js", "../scripts/pubSub.js", "../scripts/logParser.js", "../scripts/playerNameParser.js", "../scripts/cardTagger.js", "../scripts/cardTracker.js", "../scripts/content.js"],
  "sourcesContent": ["class StateManager {\n    constructor() {\n        this.state = {\n            playerNames: { yourName: null, opponentName: null },\n            opponentTrackedCards: [],\n        };\n        this.callbacks = []; // Array of functions to call on state change\n    }\n  \n    // Register a callback to listen for state changes\n    onStateChange(callback) {\n        this.callbacks.push(callback);\n    }\n  \n    // Notify all registered callbacks\n    notifyStateChange() {\n        this.callbacks.forEach((callback) => callback(this));\n    }\n  \n    // Load state from chrome.storage\n    async loadState() {\n        return new Promise((resolve) => {\n            chrome.storage.local.get('trackerState', (result) => {\n            if (result.trackerState) {\n                this.state = result.trackerState;\n            }\n            resolve(this.state);\n            this.notifyStateChange(); // Notify after loading\n            });\n        });\n    }\n  \n    // Save state to chrome.storage\n    saveState() {\n        chrome.storage.local.set({ trackerState: this.state }, () => {\n            this.notifyStateChange(); // Notify after saving\n        });\n    }\n  \n    // Update player names\n    updatePlayerNames(yourName, opponentName) {\n        this.state.playerNames = { yourName, opponentName };\n        this.saveState();\n    }\n\n    addOpponentTrackedCard(cardName) {\n        console.log('addOpponentTrackedCard ', this.state);\n        if (!this.state.opponentTrackedCards.includes(cardName)) {\n            this.state.opponentTrackedCards.push(cardName);\n            this.saveState();\n        }\n    }\n\n    removeOpponentTrackedCard(cardName) {\n        const index = this.state.opponentTrackedCards.indexOf(cardName);\n        if (index !== -1) {\n            this.state.opponentTrackedCards.splice(index, 1);\n            this.saveState();\n        }\n    }\n  \n    // Clear all tracked cards\n    clearOpponentTrackedCards() {\n        this.state.opponentTrackedCards = [];\n        this.saveState();\n    }\n  \n    // Get the current state\n    getState() {\n        return this.state;\n    }\n\n    getOpponentName() {\n        return this.state.playerNames.opponentName;\n    }\n\n    getYourName() {\n        return this.state.playerNames.yourName;\n    }\n\n    getOpponentTrackedCards() {\n        return this.state.opponentTrackedCards;\n    }\n  }\n  \n  export const stateManager = new StateManager();", "import { stateManager } from \"./stateManager\";\n\nexport function injectTrackerUI() {\n  const container = document.createElement('div');\n  container.id = 'card-tracker-container';\n  container.style.position = 'fixed';\n  container.style.top = '50%';\n  container.style.right = '10px';\n  container.style.transform = 'translateY(65%)';\n  container.style.backgroundColor = '#f9f9f9';\n  container.style.border = '1px solid #ddd';\n  container.style.borderRadius = '10px';\n  container.style.padding = '15px';\n  container.style.zIndex = '10000';\n  container.style.width = '280px';\n  container.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n  container.style.fontFamily = 'Arial, sans-serif';\n  container.style.fontSize = '14px';\n\n  // Add a draggable header\n  const header = document.createElement('div');\n  header.style.cursor = 'move'; // Cursor changes only over the header\n  header.style.backgroundColor = '#ddd';\n  header.style.padding = '10px';\n  header.style.textAlign = 'center';\n  header.style.borderBottom = '1px solid #ccc';\n  header.style.borderRadius = '10px';\n\n  header.textContent = 'Card Tracker';\n  container.appendChild(header);\n\n  // Tracker content\n  const content = document.createElement('div');\n  content.innerHTML = `\n    <div id=\"tracker-list\" style=\"max-height: 250px; overflow-y: auto; border: 1px solid #ddd; border-radius: 8px; padding: 10px; background-color: #fff;\">\n      <p style=\"text-align: center; color: #999;\">No cards tracked yet.</p>\n    </div>\n    <div style=\"margin-top: 15px; display: flex; justify-content: space-between;\">\n      <button id=\"add-card-btn\" style=\"\n        background-color: #4CAF50;\n        color: white;\n        border: none;\n        border-radius: 5px;\n        padding: 8px 12px;\n        cursor: pointer;\n        font-size: 14px;\n      \">\n        Add Card\n      </button>\n      <button id=\"clear-cards-btn\" style=\"\n        background-color: #f44336;\n        color: white;\n        border: none;\n        border-radius: 5px;\n        padding: 8px 12px;\n        cursor: pointer;\n        font-size: 14px;\n      \">\n        Clear All\n      </button>\n    </div>\n  `;\n  container.appendChild(content);\n\n  document.body.appendChild(container);\n\n  // Add drag functionality\n  makeDraggable(container, header);\n\n  // Example button functionality\n  const addCardBtn = container.querySelector('#add-card-btn');\n  const trackerList = container.querySelector('#tracker-list');\n  addCardBtn.addEventListener('click', () => {\n      const cardName = prompt('Enter card name:');\n      if (cardName) {\n          stateManager.addOpponentTrackedCard(cardName);\n      }\n  });\n\n  const clearCardsBtn = container.querySelector('#clear-cards-btn');\n  clearCardsBtn.addEventListener('click', () => {\n        stateManager.clearOpponentTrackedCards();\n  });\n}\n\nexport function renderTrackerUI() {\n  const opponentTrackedCards = stateManager.getOpponentTrackedCards();\n  const trackerList = document.querySelector('#tracker-list');\n  if (!trackerList) return;\n\n  // Clear the existing UI\n  trackerList.innerHTML = '';\n\n  // Add each card in the state\n  if (opponentTrackedCards.length > 0) {\n    opponentTrackedCards.forEach((cardName) => {\n      const cardElement = document.createElement('div');\n      cardElement.style.display = 'flex';\n      cardElement.style.justifyContent = 'space-between';\n      cardElement.style.alignItems = 'center';\n      cardElement.style.border = '1px solid #ddd';\n      cardElement.style.borderRadius = '4px';\n      cardElement.style.padding = '5px';\n      cardElement.style.marginBottom = '5px';\n      cardElement.style.backgroundColor = '#f9f9f9';\n\n      // Card text\n      const cardText = document.createElement('span');\n      cardText.textContent = cardName;\n\n      // Remove button\n      const removeButton = createRemoveButton();\n\n      // Add event listener to remove the card\n      removeButton.addEventListener('click', () => {\n        stateManager.removeOpponentTrackedCard(cardName); // Call stateManager to remove the card\n      });\n\n      // Append text and button to the card element\n      cardElement.appendChild(cardText);\n      cardElement.appendChild(removeButton);\n\n      trackerList.appendChild(cardElement);\n    });\n  } else {\n    // Add a placeholder message if no cards are tracked\n    trackerList.innerHTML = '<p style=\"text-align: center; color: #666;\">No cards tracked yet.</p>';\n  }\n}\n\nfunction makeDraggable(container, dragHandle) {\n  let isDragging = false;\n  let offsetX = 0, offsetY = 0;\n\n  // Mouse down only on the drag handle\n  dragHandle.addEventListener('mousedown', (e) => {\n    isDragging = true;\n\n    // Calculate the offset from the mouse to the container's position\n    const rect = container.getBoundingClientRect();\n    offsetX = e.clientX - rect.left;\n    offsetY = e.clientY - rect.top;\n\n    document.body.style.cursor = 'grabbing'; // Change cursor when dragging\n  });\n\n  // Mouse move to drag\n  document.addEventListener('mousemove', (e) => {\n    if (!isDragging) return;\n\n    // Calculate the new position\n    const x = e.clientX - offsetX;\n    const y = e.clientY - offsetY;\n\n    container.style.left = `${x}px`;\n    container.style.top = `${y}px`;\n    container.style.transform = ''; // Remove centering transform while dragging\n  });\n\n  // Mouse up to stop dragging\n  document.addEventListener('mouseup', () => {\n    if (isDragging) {\n      isDragging = false;\n      document.body.style.cursor = 'default'; // Reset cursor when not dragging\n    }\n  });\n}\n\nfunction createRemoveButton() {\n  const removeButton = document.createElement('button');\n  removeButton.textContent = '\u00D7'; // Use a more aesthetic \"X\" symbol\n  removeButton.style.backgroundColor = 'white'; // Transparent background\n  removeButton.style.color = '#f44336'; // Red color for visibility\n  removeButton.style.border = 'none'; // Remove default button border\n  removeButton.style.borderRadius = '50%'; // Circular shape\n  removeButton.style.width = '24px'; // Fixed size\n  removeButton.style.height = '24px';\n  removeButton.style.cursor = 'pointer'; // Indicate interactivity\n  removeButton.style.display = 'flex'; // Center the \"X\"\n  removeButton.style.alignItems = 'center';\n  removeButton.style.justifyContent = 'center';\n  removeButton.style.fontWeight = 'bold'; // Bold font for visibility\n  removeButton.style.fontSize = '16px'; // Adjust font size for balance\n  removeButton.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.2)'; // Add slight shadow for depth\n  removeButton.style.transition = 'transform 0.2s ease, background-color 0.2s ease'; // Smooth hover effects\n\n  // Hover effect\n  removeButton.addEventListener('mouseenter', () => {\n    removeButton.style.transform = 'scale(1.2)'; // Slightly enlarge\n    removeButton.style.backgroundColor = '#fddcdc'; // Add subtle red background\n  });\n\n  removeButton.addEventListener('mouseleave', () => {\n    removeButton.style.transform = 'scale(1)'; // Reset size\n    removeButton.style.backgroundColor = 'transparent'; // Reset background\n  });\n\n  return removeButton;\n}\n", "class PubSub {\n    constructor() {\n        this.events = {};\n    }\n\n    subscribe(eventName, callback) {        \n        if (!this.events[eventName]) {\n            this.events[eventName] = [];\n        }\n        this.events[eventName].push(callback);\n    }\n\n    unsubscribe(eventName, callback) {\n        if (this.events[eventName]) {\n            this.events[eventName] = this.events[eventName].filter((cb) => cb !== callback);\n        }\n    }\n\n    publish(eventName, data) {\n        if (this.events[eventName]) {\n            this.events[eventName].forEach((callback) => callback(data));\n        }\n    }\n}\n\nexport const pubSub = new PubSub();\n", "import { pubSub } from \"./pubSub\";\n\nexport const DRAW = 'DRAW';\nexport const PLAY = 'PLAY';\nexport const SKIP = 'SKIP';\n\n\nconst patterns = [\n    {\n        regex: /^(.*) is now/, // skip\n        action: SKIP,\n    },\n    {\n        regex: /^(.*) takes (.*) in reputation range from the display/, // draw from rep\n        action: DRAW,\n    },\n    {\n        regex: /^(.*) snaps (.*) from the display/, // snapping (cards @ 5, income, reptile)\n        action: DRAW,\n    },\n    {\n        regex: /^(.*) draws (.*) sponsor/, // hollywood hills\n        action: DRAW,\n    },\n    {\n        regex: /^(.*) keeps (.*?) card/, // hunting\n        action: DRAW,\n    },\n    {\n        regex: /^(.*) takes (.*?) from the diplay/, // sponsor magnet\n        action: DRAW,\n    },\n    {\n        regex: /^(.*) plays (.*) for/, // animal\n        action: PLAY,\n    },\n    {\n        regex: /^(.*) plays (.*)/, // sponsor\n        action: PLAY,\n    },\n    {\n        regex: /^(.*) plays a new conservation project: (.*)$/, // conservation project\n        action: PLAY,\n    },\n];\n\nfunction parseLogEntry(logEntry) {\n    for (const { regex, action } of patterns) {\n        const match = logEntry.match(regex);\n\n        if (match) {\n            const playerName = match[1] ? match[1].trim() : undefined;\n            const cardNames = match[2] ? match[2].trim() : undefined;\n\n            cardNames.split(',').forEach(cardName => {\n                cardName = cardName.trim();\n\n                if (!isNaN(cardName)) {\n                    return;\n                }\n                if (action === DRAW) {\n                    pubSub.publish(DRAW, { playerName, cardName });\n                }\n                if (action === PLAY) {\n                    pubSub.publish(PLAY, { playerName, cardName });\n                }\n            });\n\n            return; // Exit after processing the first matching pattern\n        }\n    }\n}\n\nexport function observeLogChanges() {\n    const logContainer = document.querySelector('#logs');\n  \n    if (!logContainer) {\n        return;\n    }\n  \n    const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            if (mutation.addedNodes.length > 0) {\n            mutation.addedNodes.forEach((node) => {\n                if (node.nodeType === Node.ELEMENT_NODE) {\n                    const logEntry = node.textContent.trim().replace(/\\n|\\r/g, \"\");\n                    parseLogEntry(logEntry);\n                }\n            });\n            }\n        });\n    });\n  \n    observer.observe(logContainer, { childList: true, subtree: false });\n}\n", "import { stateManager } from \"./stateManager\";\n\nexport function updatePlayerNames() {\n    const playerNames = document.querySelectorAll('.player-name');\n    const yourNameElement = playerNames ? playerNames[0] : null;\n    const opponentNameElement = playerNames ? playerNames[1] : null;\n  \n    const yourName = yourNameElement ? yourNameElement.textContent.trim() : null;\n    const opponentName = opponentNameElement ? opponentNameElement.textContent.trim() : null;\n\n    stateManager.updatePlayerNames(yourName, opponentName);\n  }\n  ", "function parseConservationProjects() {\n    const conservationProjects = [];\n  \n    // Parse base projects\n    const baseProjectElements = document.querySelectorAll('#base-projects-holder .project-holder');\n    baseProjectElements.forEach((project) => {\n        const badge = project.querySelector('.badge-icon');\n        if (badge) {\n            const projectType = badge.getAttribute('data-type');\n            \n            if (projectType) {\n                conservationProjects.push({ type: 'BASE', projectType });\n            }\n        }\n    });\n\n    function parseNonBaseProject(project) {\n        const badge = project.querySelector('.badge-icon');\n        const pzooIcon = project.querySelector('.icon-partner-zoo');\n        const releaseIcon = project.querySelector('.icon-release-animal');\n\n        if (badge) {\n            const projectType = badge.getAttribute('data-type');\n            \n            if (projectType) {\n                if (pzooIcon) {\n                    conservationProjects.push({ type: 'PROG', projectType });\n                }\n\n                if (releaseIcon) {\n                    conservationProjects.push({ type: 'RELEASE', projectType });\n                }\n            }\n        }\n    }\n\n    // Parse project holder\n    const activeProjects = document.querySelectorAll('#projects-holder .project-holder');\n    activeProjects.forEach(parseNonBaseProject);\n\n    // Parse hand and display for projects\n    const displayProjectCards = document.querySelectorAll('#cards-pool .project-card');\n    displayProjectCards.forEach(parseNonBaseProject);\n\n    const handProjectCards = document.querySelectorAll('.player-board-hand .project-card');\n    handProjectCards.forEach(parseNonBaseProject);\n\n    return conservationProjects;\n}\n\nfunction extractCardIcons(cardElement) {\n    const topRightDiv = cardElement.querySelector('.ark-card-top-right');\n    if (!topRightDiv) return [];\n  \n    // Extract unique icons using a Set\n    const badges = topRightDiv.querySelectorAll('.badge-icon');\n    const icons = new Set(Array.from(badges).map((badge) => badge.getAttribute('data-type')));\n    return Array.from(icons); // Convert Set back to an array\n}\n\nfunction matchCardToProjects(cardElement, conservationProjects) {\n    const cardIcons = extractCardIcons(cardElement); // Deduplicated icons from the card\n    const matches = [];\n\n    // Match card icons with conservation project types\n    for (const project of conservationProjects) {\n        if (cardIcons.includes(project.projectType)) {\n            matches.push(project);\n        }\n    }\n\n    return matches;\n}\n\nfunction tagMatchingCards(projects) {\n    const cardAreas = ['.card-pool-folder .ark-card', '.player-board-hand .ark-card'];\n  \n    cardAreas.forEach((area) => {\n        const cards = document.querySelectorAll(area);\n    \n        cards.forEach((card) => {\n            if (card.getAttribute('data-unmarked') === 'true') return;\n\n            const matchingProjects = matchCardToProjects(card, projects);\n            tagCardWithMatches(card, matchingProjects);\n        });\n    });\n}\n\nfunction tagCardWithMatches(cardElement, projects) {\n    let tagContainer = cardElement.querySelector('.tag-container');\n    if (tagContainer) {\n        tagContainer.remove();\n    }\n\n    if (!projects.length) {\n        removeCardOverlay(cardElement);\n        return;\n    }\n\n    addCardOverlay(cardElement);\n    addIgnoreButton(cardElement);\n\n    // Create or reset the tag container\n    tagContainer = document.createElement('div');\n    tagContainer.className = 'tag-container';\n    tagContainer.style.position = 'absolute';\n    tagContainer.style.top = '50%';\n    tagContainer.style.left = '50%';\n    tagContainer.style.transform = 'translate(-50%, -50%)'; // Center the container\n    tagContainer.style.display = 'flex';\n    tagContainer.style.flexDirection = 'column';\n    tagContainer.style.alignItems = 'center';\n    cardElement.style.position = 'relative';\n    cardElement.appendChild(tagContainer);\n\n    projects.forEach((project) => {\n          // Create and append the new tag\n        const badge = createTagElement(project.type, project.type);\n        tagContainer.appendChild(badge);\n    });\n\n}\n\nconst projectTypeColors = {\n    BASE: '#4CAF50',    // Green\n    RELEASE: '#FF5722', // Orange\n    PROG: '#2196F3',    // Blue\n    DEFAULT: '#9E9E9E'  // Gray (for unknown types)\n};\n\nfunction createTagElement(tagText, projectType) {\n    const color = projectTypeColors[projectType] || projectTypeColors.DEFAULT;\n\n    const badge = document.createElement('div');\n    badge.textContent = tagText;\n    badge.className = 'tag-container-badge';\n    badge.style.backgroundColor = color;\n    badge.style.color = 'white';\n    badge.style.borderRadius = '12px';\n    badge.style.padding = '4px 8px';\n    badge.style.marginBottom = '4px';\n    badge.style.fontSize = '12px';\n    badge.style.fontWeight = 'bold';\n    badge.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.2)';\n    badge.style.pointerEvents = 'none';\n    return badge;\n}\n\nexport function updateCardTags() {\n    const projects = parseConservationProjects();\n    tagMatchingCards(projects);\n}\n\nexport function observeCards() {\n    const cardAreaSelectors = [\n        '#cards-pool',\n        '.player-board-hand',\n    ];\n\n    cardAreaSelectors.forEach((selector) => {\n        const cardArea = document.querySelector(selector);\n        if (cardArea) {\n            const observer = new MutationObserver((mutations) => {\n                const relevantMutations = mutations.filter((mutation) => {\n                    // Ignore mutations affecting overlay or tags\n                    const isOverLay = mutation.target.classList.contains('card-overlay');\n                    const isTagContainer = mutation.target.classList.contains('tag-container');\n                    const isTagContainerBadge = mutation.target.classList.contains('tag-container-badge');\n\n                    return !(isOverLay || isTagContainer || isTagContainerBadge);\n                });\n                if (relevantMutations.length > 0) {\n                    observer.disconnect();\n                    updateCardTags();\n                    setTimeout(() => {\n                        observer.observe(cardArea, { childList: true, subtree: true })\n                    }, 300)\n                }\n            });\n\n            observer.observe(cardArea, { childList: true, subtree: true });\n        }\n    });\n\n    const playAreaSelectors = [\n        '.player-board-cards',\n    ];\n\n    playAreaSelectors.forEach((selector) => {\n        const playArea = document.querySelector(selector);\n        if (playArea) {\n            console.log(\"setting up mutation observer for \", playArea);\n\n            const observer = new MutationObserver((mutations) => {\n                mutations.forEach((mutation) => {\n                console.log(\"Mutation Observed\", mutation);\n                    if (mutation.addedNodes.length > 0) {\n                        mutation.addedNodes.forEach((node) => {\n                            if (node.classList && node.classList.contains('ark-card')) {\n                                clearCard(node);\n                            }\n                        });\n                    }\n                });\n            });\n\n            observer.observe(playArea, { childList: true, subtree: true });\n        }\n    });\n}\n\nfunction addCardOverlay(card) {\n    if (card.querySelector('.card-overlay')) {\n        return; // Skip adding another overlay\n    }\n\n    // Ensure the card is positioned relative for proper overlay positioning\n    card.style.position = 'relative';\n  \n    // Create the overlay element\n    const overlay = document.createElement('div');\n    overlay.className = 'card-overlay'; // Add a class for consistent styling\n    overlay.style.position = 'absolute';\n    overlay.style.top = '0';\n    overlay.style.left = '0';\n    overlay.style.right = '0';\n    overlay.style.bottom = '0';\n    overlay.style.border = '3px solid yellow'; // Adjust color and thickness as needed\n    overlay.style.pointerEvents = 'none'; // Ensure the overlay doesn't interfere with interactions\n    overlay.style.borderRadius = 'inherit'; // Match the card's border radius\n    overlay.style.boxSizing = 'border-box'; // Ensure the border doesn't affect dimensions\n  \n    // Append the overlay to the card\n    card.appendChild(overlay);\n}\n\nfunction removeCardOverlay(card) {\n    const overlay = card.querySelector('.card-overlay'); // Find the overlay\n    if (overlay) {\n        overlay.remove(); // Remove the overlay\n    } else {\n        return;\n    }\n}\n\nfunction addIgnoreButton(cardElement) {\n    // Check if the button already exists\n    let unmarkButton = cardElement.querySelector('.unmark-button');\n    if (!unmarkButton) {\n        unmarkButton = document.createElement('button');\n        unmarkButton.textContent = '\u00D7'; // X symbol\n        unmarkButton.className = 'unmark-button';\n        unmarkButton.style.position = 'absolute';\n        unmarkButton.style.top = '30%'; // 75% from the top\n        unmarkButton.style.right = '10px'; // Close to the right edge\n        unmarkButton.style.transform = 'translateY(-50%)'; // Center the button vertically at 75%\n        unmarkButton.style.backgroundColor = 'Orange'; // Orange background\n        unmarkButton.style.color = 'white'; // White text for contrast\n        unmarkButton.style.border = 'none'; // Remove default button styling\n        unmarkButton.style.borderRadius = '50%'; // Circular shape\n        unmarkButton.style.width = '20px'; // Fixed width\n        unmarkButton.style.height = '20px'; // Fixed height\n        unmarkButton.style.display = 'flex'; // Center the X inside the circle\n        unmarkButton.style.alignItems = 'center'; // Center vertically\n        unmarkButton.style.justifyContent = 'center'; // Center horizontally\n        unmarkButton.style.fontSize = '16px'; // Larger font for X\n        unmarkButton.style.cursor = 'pointer'; // Pointer cursor for interactivity\n        unmarkButton.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.2)'; // Subtle shadow for depth\n        unmarkButton.style.zIndex = '1000';\n\n        // Add click event to unmark the card\n        unmarkButton.addEventListener('click', (event) => {\n            event.stopPropagation();\n            ignoreCard(cardElement);\n        });\n        cardElement.appendChild(unmarkButton);\n    }\n}\n\nfunction removeUnmarkButton(cardElement) {\n    const unmarkButton = cardElement.querySelector('.unmark-button'); // Find the button\n    if (unmarkButton) {\n        unmarkButton.remove(); // Remove the button\n    } else {\n        return;\n    }\n}\n\nfunction ignoreCard(cardElement) {\n    clearCard(cardElement);\n    // Mark card as unmarked\n    cardElement.setAttribute('data-unmarked', 'true');\n}\n\nfunction clearCard(cardElement) {\n    const tagContainer = cardElement.querySelector('.tag-container');\n    if (tagContainer) tagContainer.remove();\n\n    // Remove overlay\n    removeCardOverlay(cardElement);\n    removeUnmarkButton(cardElement);\n}", "import { pubSub } from \"./pubSub\";\nimport { stateManager } from \"./stateManager\";\nimport { DRAW, PLAY } from './logParser';\n\nexport class CardTracker {\n    constructor() {\n        pubSub.subscribe(DRAW, this.handleCardDrawn.bind(this));\n        pubSub.subscribe(PLAY, this.handleCardPlayed.bind(this));\n    }\n\n    handleCardDrawn({ playerName, cardName }) {\n        if (playerName === stateManager.getOpponentName()) {\n            stateManager.addOpponentTrackedCard(cardName);\n        }\n    }\n\n    handleCardPlayed({ playerName, cardName }) {\n        if (playerName === stateManager.getOpponentName()) {\n            stateManager.removeOpponentTrackedCard(cardName);\n        }\n    }\n}", "import { injectTrackerUI, renderTrackerUI } from './trackerUI.js';\nimport { observeLogChanges } from './logParser.js';\nimport { updatePlayerNames } from './playerNameParser.js';\nimport { updateCardTags, observeCards } from './cardTagger.js';\nimport { stateManager } from './stateManager.js';\nimport { CardTracker } from './cardTracker.js';\n\nfunction onStart() {\n  stateManager.loadState();\n  stateManager.onStateChange(renderTrackerUI);\n  cardTracker = new CardTracker();\n\n  injectTrackerUI();\n\n  setTimeout(() => {\n    updatePlayerNames();\n    updateCardTags();\n\n    observeLogChanges();\n    observeCards();\n  }, 500);\n}\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => {\n    onStart(stateManager)\n  });\n} else {\n  onStart(stateManager);\n}"],
  "mappings": "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",
  "names": ["StateManager", "callback", "resolve", "result", "yourName", "opponentName", "cardName", "index", "stateManager", "injectTrackerUI", "container", "header", "content", "makeDraggable", "addCardBtn", "trackerList", "cardName", "stateManager", "renderTrackerUI", "opponentTrackedCards", "cardElement", "cardText", "removeButton", "createRemoveButton", "dragHandle", "isDragging", "offsetX", "offsetY", "e", "rect", "x", "y", "PubSub", "eventName", "callback", "cb", "data", "pubSub", "DRAW", "PLAY", "SKIP", "patterns", "parseLogEntry", "logEntry", "regex", "action", "match", "playerName", "cardName", "pubSub", "observeLogChanges", "logContainer", "mutations", "mutation", "node", "updatePlayerNames", "playerNames", "yourNameElement", "opponentNameElement", "yourName", "opponentName", "stateManager", "parseConservationProjects", "conservationProjects", "project", "badge", "projectType", "parseNonBaseProject", "pzooIcon", "releaseIcon", "extractCardIcons", "cardElement", "topRightDiv", "badges", "icons", "matchCardToProjects", "cardIcons", "matches", "tagMatchingCards", "projects", "area", "card", "matchingProjects", "tagCardWithMatches", "tagContainer", "removeCardOverlay", "addCardOverlay", "addIgnoreButton", "createTagElement", "projectTypeColors", "tagText", "color", "updateCardTags", "observeCards", "selector", "cardArea", "observer", "mutations", "mutation", "isOverLay", "isTagContainer", "isTagContainerBadge", "playArea", "node", "clearCard", "overlay", "unmarkButton", "event", "ignoreCard", "removeUnmarkButton", "CardTracker", "pubSub", "DRAW", "PLAY", "playerName", "cardName", "stateManager", "onStart", "stateManager", "renderTrackerUI", "CardTracker", "injectTrackerUI", "updatePlayerNames", "updateCardTags", "observeLogChanges", "observeCards"]
}
