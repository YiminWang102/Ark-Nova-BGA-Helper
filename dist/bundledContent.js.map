{
  "version": 3,
  "sources": ["../scripts/trackerUI.js", "../scripts/logObserver.js", "../scripts/playerNameParser.js", "../scripts/cardTagger.js", "../scripts/stateManager.js", "../scripts/content.js"],
  "sourcesContent": ["export function injectTrackerUI(stateManager) {\n  const container = document.createElement('div');\n  container.id = 'card-tracker-container';\n  container.style.position = 'fixed';\n  container.style.top = '50%';\n  container.style.right = '10px';\n  container.style.transform = 'translateY(65%)';\n  container.style.backgroundColor = '#f9f9f9';\n  container.style.border = '1px solid #ddd';\n  container.style.borderRadius = '10px';\n  container.style.padding = '15px';\n  container.style.zIndex = '10000';\n  container.style.width = '280px';\n  container.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n  container.style.fontFamily = 'Arial, sans-serif';\n  container.style.fontSize = '14px';\n\n  // Add a draggable header\n  const header = document.createElement('div');\n  header.style.cursor = 'move'; // Cursor changes only over the header\n  header.style.backgroundColor = '#ddd';\n  header.style.padding = '10px';\n  header.style.textAlign = 'center';\n  header.style.borderBottom = '1px solid #ccc';\n  header.style.borderRadius = '10px';\n\n  header.textContent = 'Card Tracker';\n  container.appendChild(header);\n\n  // Tracker content\n  const content = document.createElement('div');\n  content.innerHTML = `\n    <div id=\"tracker-list\" style=\"max-height: 250px; overflow-y: auto; border: 1px solid #ddd; border-radius: 8px; padding: 10px; background-color: #fff;\">\n      <p style=\"text-align: center; color: #999;\">No cards tracked yet.</p>\n    </div>\n    <div style=\"margin-top: 15px; display: flex; justify-content: space-between;\">\n      <button id=\"add-card-btn\" style=\"\n        background-color: #4CAF50;\n        color: white;\n        border: none;\n        border-radius: 5px;\n        padding: 8px 12px;\n        cursor: pointer;\n        font-size: 14px;\n      \">\n        Add Card\n      </button>\n      <button id=\"clear-cards-btn\" style=\"\n        background-color: #f44336;\n        color: white;\n        border: none;\n        border-radius: 5px;\n        padding: 8px 12px;\n        cursor: pointer;\n        font-size: 14px;\n      \">\n        Clear All\n      </button>\n    </div>\n  `;\n  container.appendChild(content);\n\n  document.body.appendChild(container);\n\n  // Add drag functionality\n  makeDraggable(container, header);\n\n  // Example button functionality\n  const addCardBtn = container.querySelector('#add-card-btn');\n  const trackerList = container.querySelector('#tracker-list');\n  addCardBtn.addEventListener('click', () => {\n      const cardName = prompt('Enter card name:');\n      if (cardName) {\n          stateManager.addCard(cardName);\n      }\n  });\n\n  const clearCardsBtn = container.querySelector('#clear-cards-btn');\n  clearCardsBtn.addEventListener('click', () => {\n        stateManager.clearCards();\n  });\n}\n\nexport function renderTrackerUI(stateManager) {\n  const state = stateManager.getState();\n  const trackerList = document.querySelector('#tracker-list');\n  if (!trackerList) return;\n\n  // Clear the existing UI\n  trackerList.innerHTML = '';\n\n  // Add each card in the state\n  if (state.trackedCards.length > 0) {\n    state.trackedCards.forEach((cardName) => {\n      const cardElement = document.createElement('div');\n      cardElement.style.display = 'flex';\n      cardElement.style.justifyContent = 'space-between';\n      cardElement.style.alignItems = 'center';\n      cardElement.style.border = '1px solid #ddd';\n      cardElement.style.borderRadius = '4px';\n      cardElement.style.padding = '5px';\n      cardElement.style.marginBottom = '5px';\n      cardElement.style.backgroundColor = '#f9f9f9';\n\n      // Card text\n      const cardText = document.createElement('span');\n      cardText.textContent = cardName;\n\n      // Remove button\n      const removeButton = createRemoveButton();\n\n      // Add event listener to remove the card\n      removeButton.addEventListener('click', () => {\n        stateManager.removeCard(cardName); // Call stateManager to remove the card\n      });\n\n      // Append text and button to the card element\n      cardElement.appendChild(cardText);\n      cardElement.appendChild(removeButton);\n\n      trackerList.appendChild(cardElement);\n    });\n  } else {\n    // Add a placeholder message if no cards are tracked\n    trackerList.innerHTML = '<p style=\"text-align: center; color: #666;\">No cards tracked yet.</p>';\n  }\n}\n\nfunction makeDraggable(container, dragHandle) {\n  let isDragging = false;\n  let offsetX = 0, offsetY = 0;\n\n  // Mouse down only on the drag handle\n  dragHandle.addEventListener('mousedown', (e) => {\n    isDragging = true;\n\n    // Calculate the offset from the mouse to the container's position\n    const rect = container.getBoundingClientRect();\n    offsetX = e.clientX - rect.left;\n    offsetY = e.clientY - rect.top;\n\n    document.body.style.cursor = 'grabbing'; // Change cursor when dragging\n  });\n\n  // Mouse move to drag\n  document.addEventListener('mousemove', (e) => {\n    if (!isDragging) return;\n\n    // Calculate the new position\n    const x = e.clientX - offsetX;\n    const y = e.clientY - offsetY;\n\n    container.style.left = `${x}px`;\n    container.style.top = `${y}px`;\n    container.style.transform = ''; // Remove centering transform while dragging\n  });\n\n  // Mouse up to stop dragging\n  document.addEventListener('mouseup', () => {\n    if (isDragging) {\n      isDragging = false;\n      document.body.style.cursor = 'default'; // Reset cursor when not dragging\n    }\n  });\n}\n\nfunction createRemoveButton() {\n  const removeButton = document.createElement('button');\n  removeButton.textContent = '\u00D7'; // Use a more aesthetic \"X\" symbol\n  removeButton.style.backgroundColor = 'white'; // Transparent background\n  removeButton.style.color = '#f44336'; // Red color for visibility\n  removeButton.style.border = 'none'; // Remove default button border\n  removeButton.style.borderRadius = '50%'; // Circular shape\n  removeButton.style.width = '24px'; // Fixed size\n  removeButton.style.height = '24px';\n  removeButton.style.cursor = 'pointer'; // Indicate interactivity\n  removeButton.style.display = 'flex'; // Center the \"X\"\n  removeButton.style.alignItems = 'center';\n  removeButton.style.justifyContent = 'center';\n  removeButton.style.fontWeight = 'bold'; // Bold font for visibility\n  removeButton.style.fontSize = '16px'; // Adjust font size for balance\n  removeButton.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.2)'; // Add slight shadow for depth\n  removeButton.style.transition = 'transform 0.2s ease, background-color 0.2s ease'; // Smooth hover effects\n\n  // Hover effect\n  removeButton.addEventListener('mouseenter', () => {\n    removeButton.style.transform = 'scale(1.2)'; // Slightly enlarge\n    removeButton.style.backgroundColor = '#fddcdc'; // Add subtle red background\n  });\n\n  removeButton.addEventListener('mouseleave', () => {\n    removeButton.style.transform = 'scale(1)'; // Reset size\n    removeButton.style.backgroundColor = 'transparent'; // Reset background\n  });\n\n  return removeButton;\n}\n", "\nexport function observeLogChanges(logSelector, trackerCallback, stateManager) {\n    const logContainer = document.querySelector(logSelector);\n  \n    if (!logContainer) {\n      return;\n    }\n  \n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.addedNodes.length > 0) {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              const logEntry = node.textContent.trim().replace(/\\n|\\r/g, \"\");\n              trackerCallback(logEntry, stateManager); // Process the log entry\n            }\n          });\n        }\n      });\n    });\n  \n    observer.observe(logContainer, { childList: true, subtree: false });\n  }\n\n\n\n\nexport function processLogEntry(logEntry, stateManager) {\n    const patterns = [\n        {\n            regex: /^(.*) takes (.*) in reputation range from the display/,\n            action: 'take',\n        },\n        {\n            regex: /^(.*) snaps (.*) from the display/,\n            action: 'take',\n        },\n        {\n            regex: /^(.*) draws (.*) sponsor/,\n            action: 'take',\n        },\n        {\n            regex: /^(.*) plays (.*) for/,\n            action: 'play',\n        },\n        {\n            regex: /^(.*) plays (.*)$/,\n            action: 'play',\n        },\n    ];\n\n    for (const { regex, action } of patterns) {\n        const match = logEntry.match(regex);\n    \n        if (match) {\n            const playerName = match[1].trim();\n            const cardName = match[2].trim();\n    \n          // Check if the player is the opponent\n            const opponentName = stateManager.getState().playerNames.opponentName\n            if (playerName == opponentName) {\n                if (action === 'take') {\n                  stateManager.addCard(cardName); // Add the card to the tracker\n                } else if (action === 'play') {\n                  stateManager.removeCard(cardName); // Remove the card from the tracker\n                }\n            }\n            return; // Exit after processing the first matching pattern\n        }\n    }\n}", "export function parsePlayerNames() {\n    // Replace these selectors with the actual ones from the page\n    const playerNames = document.querySelectorAll('.player-name');\n    const yourNameElement = playerNames ? playerNames[0] : null;\n    const opponentNameElement = playerNames ? playerNames[1] : null;\n  \n    const yourName = yourNameElement ? yourNameElement.textContent.trim() : null;\n    const opponentName = opponentNameElement ? opponentNameElement.textContent.trim() : null;\n  \n    return { yourName, opponentName };\n  }\n  ", "function parseConservationProjects() {\n    const conservationProjects = [];\n  \n    // Parse base projects\n    const baseProjectElements = document.querySelectorAll('#base-projects-holder .project-holder');\n    baseProjectElements.forEach((project) => {\n        const badge = project.querySelector('.badge-icon');\n        if (badge) {\n            const projectType = badge.getAttribute('data-type');\n            \n            if (projectType) {\n                conservationProjects.push({ type: 'BASE', projectType });\n            }\n        }\n    });\n\n    function parseNonBaseProject(project) {\n        const badge = project.querySelector('.badge-icon');\n        const pzooIcon = project.querySelector('.icon-partner-zoo');\n        const releaseIcon = project.querySelector('.icon-release-animal');\n\n        if (badge) {\n            const projectType = badge.getAttribute('data-type');\n            \n            if (projectType) {\n                if (pzooIcon) {\n                    conservationProjects.push({ type: 'PROG', projectType });\n                }\n\n                if (releaseIcon) {\n                    conservationProjects.push({ type: 'RELEASE', projectType });\n                }\n            }\n        }\n    }\n\n    // Parse project holder\n    const activeProjects = document.querySelectorAll('#projects-holder .project-holder');\n    activeProjects.forEach(parseNonBaseProject);\n\n    // Parse hand and display for projects\n    const displayProjectCards = document.querySelectorAll('#cards-pool .project-card');\n    displayProjectCards.forEach(parseNonBaseProject);\n\n    const handProjectCards = document.querySelectorAll('.player-board-hand .project-card');\n    handProjectCards.forEach(parseNonBaseProject);\n\n    return conservationProjects;\n}\n\nfunction extractCardIcons(cardElement) {\n    const topRightDiv = cardElement.querySelector('.ark-card-top-right');\n    if (!topRightDiv) return [];\n  \n    // Extract unique icons using a Set\n    const badges = topRightDiv.querySelectorAll('.badge-icon');\n    const icons = new Set(Array.from(badges).map((badge) => badge.getAttribute('data-type')));\n    return Array.from(icons); // Convert Set back to an array\n}\n\nfunction matchCardToProjects(cardElement, conservationProjects) {\n    const cardIcons = extractCardIcons(cardElement); // Deduplicated icons from the card\n    const matches = [];\n\n    // Match card icons with conservation project types\n    for (const project of conservationProjects) {\n        if (cardIcons.includes(project.projectType)) {\n            matches.push(project);\n        }\n    }\n\n    return matches;\n}\n\nfunction tagMatchingCards(projects) {\n    const cardAreas = ['.card-pool-folder .ark-card', '.player-board-hand .ark-card'];\n  \n    cardAreas.forEach((area) => {\n        const cards = document.querySelectorAll(area);\n    \n        cards.forEach((card) => {\n            if (card.getAttribute('data-unmarked') === 'true') return;\n\n            const matchingProjects = matchCardToProjects(card, projects);\n            tagCardWithMatches(card, matchingProjects);\n        });\n    });\n}\n\nfunction tagCardWithMatches(cardElement, projects) {\n    let tagContainer = cardElement.querySelector('.tag-container');\n    if (tagContainer) {\n        tagContainer.remove();\n    }\n\n    if (!projects.length) {\n        removeCardOverlay(cardElement);\n        return;\n    }\n\n    tagCardWithOverlay(cardElement);\n    addUnmarkButton(cardElement);\n\n    // Create or reset the tag container\n    tagContainer = document.createElement('div');\n    tagContainer.className = 'tag-container';\n    tagContainer.style.position = 'absolute';\n    tagContainer.style.top = '50%';\n    tagContainer.style.left = '50%';\n    tagContainer.style.transform = 'translate(-50%, -50%)'; // Center the container\n    tagContainer.style.display = 'flex';\n    tagContainer.style.flexDirection = 'column';\n    tagContainer.style.alignItems = 'center';\n    cardElement.style.position = 'relative';\n    cardElement.appendChild(tagContainer);\n\n    projects.forEach((project) => {\n          // Create and append the new tag\n        const badge = createTagElement(project.type, project.type);\n        tagContainer.appendChild(badge);\n    });\n\n}\n\nconst projectTypeColors = {\n    BASE: '#4CAF50',    // Green\n    RELEASE: '#FF5722', // Orange\n    PROG: '#2196F3',    // Blue\n    DEFAULT: '#9E9E9E'  // Gray (for unknown types)\n};\n\nfunction createTagElement(tagText, projectType) {\n    const color = projectTypeColors[projectType] || projectTypeColors.DEFAULT;\n\n    const badge = document.createElement('div');\n    badge.textContent = tagText;\n    badge.className = 'tag-container-badge';\n    badge.style.backgroundColor = color;\n    badge.style.color = 'white';\n    badge.style.borderRadius = '12px';\n    badge.style.padding = '4px 8px';\n    badge.style.marginBottom = '4px';\n    badge.style.fontSize = '12px';\n    badge.style.fontWeight = 'bold';\n    badge.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.2)';\n    badge.style.pointerEvents = 'none';\n    return badge;\n}\n\nexport function updateCardTags() {\n    const projects = parseConservationProjects();\n    tagMatchingCards(projects);\n}\n\nexport function observeCards() {\n    const cardAreaClasses = [\n        '.card-pool-folder',\n        '.player-board-hand'\n    ];\n\n    cardAreaClasses.forEach((cardClass) => {\n        const cardArea = document.querySelector(cardClass);\n        if (cardArea) {\n            const observer = new MutationObserver((mutations) => {\n                const relevantMutations = mutations.filter((mutation) => {\n                    // Ignore mutations affecting overlay or tags\n                    const isOverLay = mutation.target.classList.contains('card-overlay');\n                    const isTagContainer = mutation.target.classList.contains('tag-container');\n                    const isTagContainerBadge = mutation.target.classList.contains('tag-container-badge');\n\n                    return !(isOverLay || isTagContainer || isTagContainerBadge);\n                });\n                if (relevantMutations.length > 0) {\n                    debouncedUpdateCardTags();\n                }\n            });\n            \n            const debouncedUpdateCardTags = debounce(() => {\n                observer.disconnect();\n                updateCardTags();\n                setTimeout(() => {\n                    observer.observe(cardArea, { childList: true, subtree: true })\n                }, 400)\n            }, 100)\n    \n            observer.observe(cardArea, { childList: true, subtree: true });\n        }\n\n    });\n}\n\nfunction tagCardWithOverlay(card) {\n    if (card.querySelector('.card-overlay')) {\n        return; // Skip adding another overlay\n    }\n\n    // Ensure the card is positioned relative for proper overlay positioning\n    card.style.position = 'relative';\n  \n    // Create the overlay element\n    const overlay = document.createElement('div');\n    overlay.className = 'card-overlay'; // Add a class for consistent styling\n    overlay.style.position = 'absolute';\n    overlay.style.top = '0';\n    overlay.style.left = '0';\n    overlay.style.right = '0';\n    overlay.style.bottom = '0';\n    overlay.style.border = '3px solid yellow'; // Adjust color and thickness as needed\n    overlay.style.pointerEvents = 'none'; // Ensure the overlay doesn't interfere with interactions\n    overlay.style.borderRadius = 'inherit'; // Match the card's border radius\n    overlay.style.boxSizing = 'border-box'; // Ensure the border doesn't affect dimensions\n  \n    // Append the overlay to the card\n    card.appendChild(overlay);\n}\n\nfunction removeCardOverlay(card) {\n    const overlay = card.querySelector('.card-overlay'); // Find the overlay\n    if (overlay) {\n        overlay.remove(); // Remove the overlay\n    } else {\n        return;\n    }\n}\n\n\nfunction debounce(func, delay=300) {\n    let timeout;\n    return function (...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(this, args), delay);\n    };\n}\n\nfunction addUnmarkButton(cardElement) {\n    // Check if the button already exists\n    let unmarkButton = cardElement.querySelector('.unmark-button');\n    if (!unmarkButton) {\n        unmarkButton = document.createElement('button');\n        unmarkButton.textContent = '\u00D7'; // X symbol\n        unmarkButton.className = 'unmark-button';\n        unmarkButton.style.position = 'absolute';\n        unmarkButton.style.top = '30%'; // 75% from the top\n        unmarkButton.style.right = '10px'; // Close to the right edge\n        unmarkButton.style.transform = 'translateY(-50%)'; // Center the button vertically at 75%\n        unmarkButton.style.backgroundColor = 'Orange'; // Orange background\n        unmarkButton.style.color = 'white'; // White text for contrast\n        unmarkButton.style.border = 'none'; // Remove default button styling\n        unmarkButton.style.borderRadius = '50%'; // Circular shape\n        unmarkButton.style.width = '20px'; // Fixed width\n        unmarkButton.style.height = '20px'; // Fixed height\n        unmarkButton.style.display = 'flex'; // Center the X inside the circle\n        unmarkButton.style.alignItems = 'center'; // Center vertically\n        unmarkButton.style.justifyContent = 'center'; // Center horizontally\n        unmarkButton.style.fontSize = '16px'; // Larger font for X\n        unmarkButton.style.cursor = 'pointer'; // Pointer cursor for interactivity\n        unmarkButton.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.2)'; // Subtle shadow for depth\n        unmarkButton.style.zIndex = '1000';\n\n        // Add click event to unmark the card\n        unmarkButton.addEventListener('click', (event) => {\n            event.stopPropagation();\n            unmarkCard(cardElement);\n        });\n        cardElement.appendChild(unmarkButton);\n    }\n}\n\nfunction unmarkCard(cardElement) {\n    // Remove tags\n    const tagContainer = cardElement.querySelector('.tag-container');\n    if (tagContainer) tagContainer.remove();\n\n    // Remove overlay\n    removeCardOverlay(cardElement);\n    removeUnmarkButton(cardElement);\n    // Mark card as unmarked\n    cardElement.setAttribute('data-unmarked', 'true');\n}\n\nfunction removeUnmarkButton(cardElement) {\n    const unmarkButton = cardElement.querySelector('.unmark-button'); // Find the button\n    if (unmarkButton) {\n        unmarkButton.remove(); // Remove the button\n    } else {\n        return;\n    }\n}", "export default class StateManager {\n    constructor() {\n      this.state = {\n        playerNames: { yourName: null, opponentName: null },\n        trackedCards: [],\n      };\n      this.callbacks = []; // Array of functions to call on state change\n    }\n  \n    // Register a callback to listen for state changes\n    onStateChange(callback) {\n      this.callbacks.push(callback);\n    }\n  \n    // Notify all registered callbacks\n    notifyStateChange() {\n      this.callbacks.forEach((callback) => callback(this));\n    }\n  \n    // Load state from chrome.storage\n    async loadState() {\n      return new Promise((resolve) => {\n        chrome.storage.local.get('trackerState', (result) => {\n          if (result.trackerState) {\n            this.state = result.trackerState;\n          }\n          resolve(this.state);\n          this.notifyStateChange(); // Notify after loading\n        });\n      });\n    }\n  \n    // Save state to chrome.storage\n    saveState() {\n      chrome.storage.local.set({ trackerState: this.state }, () => {\n        this.notifyStateChange(); // Notify after saving\n      });\n    }\n  \n    // Update player names\n    updatePlayerNames(yourName, opponentName) {\n      this.state.playerNames = { yourName, opponentName };\n      this.saveState();\n    }\n  \n    // Add a card to the tracker\n    addCard(cardName) {\n      if (!this.state.trackedCards.includes(cardName)) {\n        this.state.trackedCards.push(cardName);\n        this.saveState();\n      }\n    }\n  \n    // Remove a card from the tracker\n    removeCard(cardName) {\n      const index = this.state.trackedCards.indexOf(cardName);\n      if (index !== -1) {\n        this.state.trackedCards.splice(index, 1);\n        this.saveState();\n      }\n    }\n  \n    // Clear all tracked cards\n    clearCards() {\n      this.state.trackedCards = [];\n      this.saveState();\n    }\n  \n    // Get the current state\n    getState() {\n      return this.state;\n    }\n  }\n  ", "import { injectTrackerUI, renderTrackerUI } from './trackerUI.js';\nimport { observeLogChanges, processLogEntry } from './logObserver.js';\nimport { parsePlayerNames } from './playerNameParser.js';\nimport { updateCardTags, observeCards } from './cardTagger.js';\nimport StateManager from './stateManager.js';\n\nconst stateManager = new StateManager();\n\nfunction onStart(stateManager) {\n  stateManager.loadState();\n  stateManager.onStateChange(renderTrackerUI);\n\n  injectTrackerUI(stateManager);\n\n\n  setTimeout(() => {\n    observeLogChanges('#logs', processLogEntry, stateManager);\n    const { yourName, opponentName } = parsePlayerNames();\n    stateManager.updatePlayerNames(yourName, opponentName);\n    updateCardTags();\n    observeCards();\n  }, 1000);\n}\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => {\n    onStart(stateManager)\n  });\n} else {\n  onStart(stateManager);\n}"],
  "mappings": "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",
  "names": ["injectTrackerUI", "stateManager", "container", "header", "content", "makeDraggable", "addCardBtn", "trackerList", "cardName", "renderTrackerUI", "state", "cardElement", "cardText", "removeButton", "createRemoveButton", "dragHandle", "isDragging", "offsetX", "offsetY", "e", "rect", "x", "y", "observeLogChanges", "logSelector", "trackerCallback", "stateManager", "logContainer", "mutations", "mutation", "node", "logEntry", "processLogEntry", "patterns", "regex", "action", "match", "playerName", "cardName", "opponentName", "parsePlayerNames", "playerNames", "yourNameElement", "opponentNameElement", "yourName", "opponentName", "parseConservationProjects", "conservationProjects", "project", "badge", "projectType", "parseNonBaseProject", "pzooIcon", "releaseIcon", "extractCardIcons", "cardElement", "topRightDiv", "badges", "icons", "matchCardToProjects", "cardIcons", "matches", "tagMatchingCards", "projects", "area", "card", "matchingProjects", "tagCardWithMatches", "tagContainer", "removeCardOverlay", "tagCardWithOverlay", "addUnmarkButton", "createTagElement", "projectTypeColors", "tagText", "color", "updateCardTags", "observeCards", "cardClass", "cardArea", "observer", "mutations", "mutation", "isOverLay", "isTagContainer", "isTagContainerBadge", "debouncedUpdateCardTags", "debounce", "overlay", "func", "delay", "timeout", "args", "unmarkButton", "event", "unmarkCard", "removeUnmarkButton", "StateManager", "callback", "resolve", "result", "yourName", "opponentName", "cardName", "index", "stateManager", "StateManager", "onStart", "renderTrackerUI", "injectTrackerUI", "observeLogChanges", "processLogEntry", "yourName", "opponentName", "parsePlayerNames", "updateCardTags", "observeCards"]
}
